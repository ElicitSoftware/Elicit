#This file will setup a docker network named elicit (or what ever directory it is run from)
# It will then create 4 containers:
#   1. db - postgres database
#   2. survey - the survey application
#   3. fhhs - the family health history survey
#   4. pedigree - the service for drawing pedigrees
#
# The containers initialize the database when they start.
# However, they need to run in the correct order.
# When the Survey container starts it will create the database tables.
# When the FHHS container starts it will insert the data for the Family Health History Survey.
# The FHHS will fail as it is trying to build database views based on the Dimensional data tables in the database
# that do not exist yet.
# When you restart the Survey container it will create the Dimensional database tables used for the new survey
# for use in reporting.
# Then when the FHHS container is restarted it should find the tables and create the views.
#
# So in order for the application to be fully configured you will need to start the containers multiple times using the following commands:
# 1. docker-compose up -d
# 2. Wait for 30 seconds or until the FHHS container stops.
# 2. docker-compose restart
# 2. Wait for 30 seconds or until the FHHS container stops.
# 3. docker-compose restart
#
# For Mac and Linux users these can be combined into a single command:
# docker compose up -d && sleep 25 && docker compose restart && sleep 25 && docker compose restart && sleep 25 && echo "Initialization complete Please visit http://localhost:8080"
#
# For Windows users you can use the following command:
# docker-compose up -d && timeout /t 25 && docker-compose restart && timeout /t 25 && docker-compose restart && timeout /t 25 && echo "Initialization complete Please visit http://localhost:8080"
#
# The application will be available at the following URL: http://localhost:8080

services:
  survey:
    image: elicitsoftware/survey:latest
    ports:
      - 8080:8080
    environment:
      TZ: America/Detroit
      # AutoRegister allows for users to type in any token for testing.
      # The Admin tool is used to create tokens and manage respondents.
      # Remove this for production, the default is false.
      token.autoRegister: true
    healthcheck:
        test: ["CMD", "curl", "--head","fsS", "http://localhost:8080/q/health/ready"]
        interval: 15s
        timeout: 5s
        retries: 20
    volumes:
      - ../Elicit_Campsites/um-brand/:/brand:ro
      # - ./test-brand/:/brand:ro
      # - ./test-partial-brand/:/brand:ro
    depends_on:
     - db
  fhhs:
    image: elicitsoftware/fhhs:latest
    #open this port for local testing. It is not needed for inter container communication.
    ports:
      - 8082:8080
    healthcheck:
        test: ["CMD", "curl", "--head","fsS", "http://localhost:8082/q/health/ready"]
        interval: 15s
        timeout: 5s
        retries: 20
    environment:
      TZ: America/Detroit
      pedigree.url: http://pedigree:8080/svg
      family.history.sftp.host: sftpServer
      family.history.sftp.username: fhhs_user
      family.history.sftp.password: pass
      family.history.sftp.path: /upload/reports
      family.history.sftp.port: 22
      family.history.upload.psa.id: 1
      family.history.sftp.xml.template: |+
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <umhsdoc2>
            <imageSource>MiGHT</imageSource>
            <updateFlag>N</updateFlag>
            <externalSourceId>{RespondentId}</externalSourceId>
            <mrn>{Xid}</mrn>
            <formDesignatorNum>38670</formDesignatorNum>
            <docDate>{Finalized}</docDate>
            <pages>
                <page>{Xid}.pdf</page>
            </pages>
        </umhsdoc2>       
    depends_on:
      - db
      - survey
      - sftpServer
  premm5:
    image: elicitsoftware/premm5:latest
    #open this port for local testing. It is not needed for inter container communication.
    ports:
      - 8084:8080
    healthcheck:
        test: ["CMD", "curl", "--head","fsS", "http://localhost:8084/q/health/ready"]
        interval: 15s
        timeout: 5s
        retries: 20
    environment:
      TZ: America/Detroit
      truelicense.store.file: /license/PREMM5.license
    depends_on:
      - db
      - survey
    volumes:
      - ./PREMM5/PREMM5.license:/license/PREMM5.license:ro      
  pedigree:
    image: elicitsoftware/pedigree:latest
    #open this port for local testing. It is not needed for inter container communication.
    ports:
      - 8083:8080
  admin:
    image: elicitsoftware/admin:latest
    ports:
      - 8081:8080
    healthcheck:
        test: ["CMD", "curl", "--head","fsS", "http://localhost:8081/q/health/ready"]
        interval: 15s
        timeout: 5s
        retries: 20
    environment:
      TZ: America/Detroit
      quarkus.mailer.from: elicit@localhost
      quarkus.mailer.host: mailpit
      quarkus.mailer.port: 1025
      quarkus.mailer.tls: false
      # quarkus.mailer.auth-methods:
      # quarkus.mailer.username:
      # quarkus.mailer.password=
    volumes:
      - ../Elicit_Campsites/um-brand/:/brand:ro
      # - ./test-brand/:/brand:ro
      # - ./test-partial-brand/:/brand:ro                
    depends_on:
      - db
      - survey
      - fhhs
      - pedigree
# Test containers
# These containers are used for running the application in a development environment.
# They are not needed for production or will be replaced by non containerized applications.
## Postgres Database
  db:
    image: elicitsoftware/elicit_db:latest
    # Setup the directories to persist data between starts.
    # if you need to reset your database you can delete the PGDATA directory and restart the containers
    # this will cause the database to be recreated.
    volumes:
      - ./postgresql/PGDATA:/var/lib/postgresql/data
    ports:
      - 5452:5432
    environment:
      TZ: "America/Detroit"    
      POSTGRES_USER: "survey"
      POSTGRES_PASSWORD: "admin"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U survey"]
      interval: 15s
      timeout: 5s
      retries: 15
# OIDC Server
# This is a Keycloak server that is used for testing the OIDC integration.
  keycloak:
    image: quay.io/keycloak/keycloak:26.2.3
    command: start-dev --import-realm --verbose -Dkeycloak.features=scripts
    ports:
      - "8180:8080"
    environment:
      TZ: "America/Detroit"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak:/opt/keycloak/data/import
      - ./keycloak/db:/h2  
# SMTP Server
# This is a Mailpit server that is used for testing the email integration.    
# visit http://localhost:8025/ to view the emails sent by the application.
  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    volumes:
      - ./mailpit_data:/data
    ports:
      - 8025:8025
      - 1025:1025
    environment:
      TZ: "America/Detroit"
      MP_MAX_MESSAGES: 5000
      MP_DATABASE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
# SFTP Server
# This is a SFTP server that is used for testing the SFTP integration.      
  sftpServer:
    image: atmoz/sftp:alpine-3.7
    ports:
      - "22:22"
    environment:
      TZ: "America/Detroit"
      SFTP_USERS: fhhs_user:pass:::upload/reports
    volumes:
      - ./sftp_data/temp/upload/reports:/home/fhhs_user/upload/reports